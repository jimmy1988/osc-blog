{"version":3,"sources":["../../../src/researches/keywordCount.js"],"names":["paper","researcher","topicForms","getResearch","text","getText","locale","getLocale","sentences","keywordsFound","count","matches","sentencesWithKeywords","forEach","matchesInSentence","keyphraseForms","map","sentence","keywordForms","hasAllKeywords","every","keywordForm","counts","match","foundWords","Math","min","push","sort","a","b","length","markings"],"mappings":";;;;;;kBAee,UAAUA,KAAV,EAAiBC,UAAjB,EAA8B;AAC5C,KAAMC,aAAaD,WAAWE,WAAX,CAAwB,YAAxB,CAAnB;AACA,KAAMC,OAAOJ,MAAMK,OAAN,EAAb;AACA,KAAMC,SAASN,MAAMO,SAAN,EAAf;;AAEA,KAAMC,YAAY,4BAAcJ,IAAd,CAAlB;;AAEA,KAAMK,gBAAgB;AACrBC,SAAO,CADc;AAErBC,WAAS,EAFY;AAGrBC,yBAAuB;AAHF,EAAtB;;AAMA;;;;;;AAMAJ,WAAUK,OAAV,CAAmB,oBAAY;AAC9B,MAAMC,oBAAoBZ,WAAWa,cAAX,CAA0BC,GAA1B,CAA+B;AAAA,UAAgB,kCAAYC,QAAZ,EAAsBC,YAAtB,EAAoCZ,MAApC,CAAhB;AAAA,GAA/B,CAA1B;AACA,MAAMa,iBAAiBL,kBAAkBM,KAAlB,CAAyB;AAAA,UAAeC,YAAYX,KAAZ,GAAoB,CAAnC;AAAA,GAAzB,CAAvB;;AAEA,MAAKS,cAAL,EAAsB;AACrB,OAAMG,SAASR,kBAAkBE,GAAlB,CAAuB;AAAA,WAASO,MAAMb,KAAf;AAAA,IAAvB,CAAf;AACA,OAAMc,aAAa,2BAAaV,kBAAkBE,GAAlB,CAAuB;AAAA,WAASO,MAAMZ,OAAf;AAAA,IAAvB,CAAb,CAAnB;AACAF,iBAAcC,KAAd,IAAuBe,KAAKC,GAAL,gCAAaJ,MAAb,EAAvB;AACAb,iBAAcE,OAAd,CAAsBgB,IAAtB,CAA4BH,UAA5B;AACAf,iBAAcG,qBAAd,CAAoCe,IAApC,CAA0CV,QAA1C;AACA;AACD,EAXD;;AAaA,KAAMN,UAAU,oBAAQ,2BAAaF,cAAcE,OAA3B,CAAR,EAA+CiB,IAA/C,CAAqD,UAAEC,CAAF,EAAKC,CAAL;AAAA,SAAYA,EAAEC,MAAF,GAAWF,EAAEE,MAAzB;AAAA,EAArD,CAAhB;;AAEA,QAAO;AACNrB,SAAOD,cAAcC,KADf;AAENC,WAASA,OAFH;AAGNqB,YAAU,gDAAsBrB,OAAtB,EAA+BF,cAAcG,qBAA7C,EAAoEN,MAApE,CAHJ;AAINyB,UAAQ7B,WAAWa,cAAX,CAA0BgB;AAJ5B,EAAP;AAMA,C;;AArDD;;;;AACA;;AAEA;;;;AACA;;;;oMANA;;AAQA","file":"keywordCount.js","sourcesContent":["/** @module analyses/getKeywordCount */\n\nimport matchWords from \"../stringProcessing/matchTextWithArray\";\nimport { uniq as unique } from \"lodash-es\";\nimport { flattenDeep } from \"lodash-es\";\nimport getSentences from \"../stringProcessing/getSentences\";\nimport { markWordsInSentences } from \"../stringProcessing/markWordsInSentences\";\n\n/**\n * Calculates the keyword count, takes morphology into account.\n *\n * @param {object} paper The paper containing keyword and text.\n * @param {object} researcher The researcher\n * @returns {number} The keyword count.\n */\nexport default function( paper, researcher ) {\n\tconst topicForms = researcher.getResearch( \"morphology\" );\n\tconst text = paper.getText();\n\tconst locale = paper.getLocale();\n\n\tconst sentences = getSentences( text );\n\n\tconst keywordsFound = {\n\t\tcount: 0,\n\t\tmatches: [],\n\t\tsentencesWithKeywords: [],\n\t};\n\n\t/*\n\t * Count the amount of key phrase occurrences in the sentences.\n\t * An occurrence is counted when all keywords of the key phrase are contained within the sentence.\n\t * Each sentence can contain multiple key phrases\n\t * (e.g. \"The apple potato is an apple and a potato.\" has two occurrences of the key phrase \"apple potato\").\n\t */\n\tsentences.forEach( sentence => {\n\t\tconst matchesInSentence = topicForms.keyphraseForms.map( keywordForms => matchWords( sentence, keywordForms, locale ) );\n\t\tconst hasAllKeywords = matchesInSentence.every( keywordForm => keywordForm.count > 0 );\n\n\t\tif ( hasAllKeywords ) {\n\t\t\tconst counts = matchesInSentence.map( match => match.count );\n\t\t\tconst foundWords = flattenDeep( matchesInSentence.map( match => match.matches ) );\n\t\t\tkeywordsFound.count += Math.min( ...counts );\n\t\t\tkeywordsFound.matches.push( foundWords );\n\t\t\tkeywordsFound.sentencesWithKeywords.push( sentence );\n\t\t}\n\t} );\n\n\tconst matches = unique( flattenDeep( keywordsFound.matches ) ).sort( ( a, b ) => b.length - a.length );\n\n\treturn {\n\t\tcount: keywordsFound.count,\n\t\tmatches: matches,\n\t\tmarkings: markWordsInSentences( matches, keywordsFound.sentencesWithKeywords, locale ),\n\t\tlength: topicForms.keyphraseForms.length,\n\t};\n}\n"]}