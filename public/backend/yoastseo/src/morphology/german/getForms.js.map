{"version":3,"sources":["../../../../src/morphology/german/getForms.js"],"names":["getForms","addSuffixesToRegulars","morphologyDataSuffixAdditions","regularSuffixes","stemmedWordToCheck","Object","keys","key","endingsToCheck","suffixesToAdd","some","endsWith","ending","concat","removeSuffixesFromRegulars","morphologyDataSuffixDeletions","suffixesToDelete","filter","includes","modifyListOfRegularSuffixes","morphologyDataNouns","additions","regularSuffixAdditions","deletions","regularSuffixDeletions","addFormsWithRemovedLetters","forms","stemChanges","changeStem","changeCategory","endingToCheck","stemWithoutEnding","slice","length","push","word","morphologyData","stemmedWord","exceptionsNouns","nouns","exceptionsAdjectives","adjectives","exceptionsVerbs","verbs","exceptions","stem","stemIfWordIsParticiple","regularNounSuffixes","map","suffix"],"mappings":"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","file":"getForms.js","sourcesContent":["import { addAllAdjectiveSuffixes } from \"./addAdjectiveSuffixes\";\nimport { detectAndStemRegularParticiple } from \"./detectAndStemRegularParticiple\";\nimport { generateAdjectiveExceptionForms } from \"./generateAdjectiveExceptionForms\";\nimport { generateNounExceptionForms } from \"./generateNounExceptionForms\";\nimport { generateRegularVerbForms } from \"./generateRegularVerbForms\";\nimport { generateVerbExceptionForms } from \"./generateVerbExceptionForms\";\nimport stem from \"./stem\";\n\nimport { uniq as unique } from \"lodash-es\";\n\n/**\n * Adds suffixes to the list of regular suffixes.\n *\n * @param {Object}          morphologyDataSuffixAdditions   The German data for suffix additions.\n * @param {Array<string>}   regularSuffixes                 All regular suffixes for German.\n * @param {string}          stemmedWordToCheck              The stem to check.\n *\n * @returns {Array<string>} The modified list of regular suffixes.\n */\nconst addSuffixesToRegulars = function( morphologyDataSuffixAdditions, regularSuffixes, stemmedWordToCheck ) {\n\tfor ( const key of Object.keys( morphologyDataSuffixAdditions ) ) {\n\t\tconst endingsToCheck = morphologyDataSuffixAdditions[ key ][ 0 ];\n\t\tconst suffixesToAdd = morphologyDataSuffixAdditions[ key ][ 1 ];\n\n\t\t// Append to the regular suffixes if one of the endings match.\n\t\tif ( endingsToCheck.some( ending => stemmedWordToCheck.endsWith( ending ) ) ) {\n\t\t\tregularSuffixes = regularSuffixes.concat( suffixesToAdd );\n\t\t}\n\t}\n\n\treturn regularSuffixes;\n};\n\n/**\n * Deletes suffixes from the list of regular suffixes.\n *\n * @param {Object}          morphologyDataSuffixDeletions   The German data for suffix deletions.\n * @param {Array<string>}   regularSuffixes                 All regular suffixes for German.\n * @param {string}          stemmedWordToCheck              The stem to check.\n *\n * @returns {Array<string>} The modified list of regular suffixes.\n */\nconst removeSuffixesFromRegulars = function( morphologyDataSuffixDeletions, regularSuffixes, stemmedWordToCheck ) {\n\tfor ( const key of Object.keys( morphologyDataSuffixDeletions ) ) {\n\t\tconst endingsToCheck = morphologyDataSuffixDeletions[ key ][ 0 ];\n\t\tconst suffixesToDelete = morphologyDataSuffixDeletions[ key ][ 1 ];\n\n\t\t// Delete from the regular suffixes if one of the endings match.\n\t\tif ( endingsToCheck.some( ending => stemmedWordToCheck.endsWith( ending ) ) ) {\n\t\t\tregularSuffixes = regularSuffixes.filter( ending => ! suffixesToDelete.includes( ending ) );\n\t\t}\n\t}\n\n\treturn regularSuffixes;\n};\n\n/**\n * Adds or removes suffixes from the list of regulars depending on the ending of the stem checked.\n *\n * @param {Object}          morphologyDataNouns The German morphology data for nouns.\n * @param {Array<string>}   regularSuffixes     All regular suffixes for German.\n * @param {string}          stemmedWordToCheck  The stem to check.\n *\n * @returns {Array<string>} The modified list of regular suffixes.\n */\nconst modifyListOfRegularSuffixes = function( morphologyDataNouns, regularSuffixes, stemmedWordToCheck ) {\n\tconst additions = morphologyDataNouns.regularSuffixAdditions;\n\tconst deletions = morphologyDataNouns.regularSuffixDeletions;\n\n\tregularSuffixes = addSuffixesToRegulars( additions, regularSuffixes, stemmedWordToCheck );\n\tregularSuffixes = removeSuffixesFromRegulars( deletions, regularSuffixes, stemmedWordToCheck );\n\n\treturn regularSuffixes;\n};\n\n/**\n * Add forms based on changes other than simple suffix concatenations.\n *\n * @param {Object}  morphologyDataNouns The German morphology data for nouns.\n * @param {string}  stemmedWordToCheck  The stem to check.\n *\n * @returns {Array<string>} The modified forms.\n */\nconst addFormsWithRemovedLetters = function( morphologyDataNouns, stemmedWordToCheck ) {\n\tconst forms = [];\n\tconst stemChanges = morphologyDataNouns.changeStem;\n\n\tfor ( const key of Object.keys( stemChanges ) ) {\n\t\tconst changeCategory = stemChanges[ key ];\n\t\tconst endingToCheck = changeCategory[ 0 ];\n\n\t\tif ( stemmedWordToCheck.endsWith( endingToCheck ) ) {\n\t\t\tconst stemWithoutEnding = stemmedWordToCheck.slice( 0, stemmedWordToCheck.length - endingToCheck.length );\n\t\t\tforms.push( stemWithoutEnding.concat( changeCategory[ 1 ] ) );\n\t\t}\n\t}\n\n\treturn forms;\n};\n\n/**\n * Creates morphological forms for a given German word.\n *\n * @param {string} word             The word to create the forms for.\n * @param {Object} morphologyData   The German morphology data (false if unavailable).\n *\n * @returns {{forms: Array<string>, stem: string}} An object with the forms created and the stemmed word.\n */\nexport function getForms( word, morphologyData ) {\n\tconst stemmedWord = stem( word );\n\tconst forms = [ word ];\n\n\t/*\n\t * Generate exception forms if the word is on an exception list. Since a given stem might sometimes be\n\t * on an exception list in different word categories (e.g., \"sau-\" from the noun \"Sau\" or the adjective \"sauer\")\n\t * we need to do this cumulatively.\n\t */\n\tconst exceptionsNouns = generateNounExceptionForms( morphologyData.nouns, stemmedWord );\n\tconst exceptionsAdjectives = generateAdjectiveExceptionForms( morphologyData.adjectives, stemmedWord );\n\tconst exceptionsVerbs = generateVerbExceptionForms( morphologyData.verbs, stemmedWord );\n\tconst exceptions = [ ...exceptionsNouns, ...exceptionsAdjectives, ...exceptionsVerbs ];\n\n\tif ( exceptions.length > 0 ) {\n\t\t// Add the original word as a safeguard.\n\t\texceptions.push( word );\n\n\t\treturn { forms: unique( exceptions ), stem: stemmedWord };\n\t}\n\n\tconst stemIfWordIsParticiple = detectAndStemRegularParticiple( morphologyData.verbs, word );\n\n\t/*\n\t * If the original word is a regular participle, it gets stemmed here. We then only create verb forms (assuming\n\t * that the participle was used verbally, e.g. \"er hat sich die Haare gefärbt\" - \"he dyed his hair\") and adjective\n\t * forms (assuming that the participle was used adjectivally, e.g. \"die Haare sind gefärbt\" - \"the hair is dyed\").\n\t * The adjective forms are based on the stem that has only the suffixes removed, not the prefixes. This is because\n\t * we want forms such as \"die gefärbten Haare\" and not (incorrectly) \"*die färbten Haare\".\n\t */\n\tif ( stemIfWordIsParticiple ) {\n\t\treturn {\n\t\t\tforms: unique( [\n\t\t\t\t...forms,\n\t\t\t\t...generateRegularVerbForms( morphologyData.verbs, stemIfWordIsParticiple ),\n\t\t\t\t...addAllAdjectiveSuffixes( morphologyData.adjectives, stemmedWord ),\n\t\t\t] ),\n\t\t\tstem: stemIfWordIsParticiple,\n\t\t};\n\t}\n\n\t// Modify regular suffixes assuming the word is a noun.\n\tlet regularNounSuffixes = morphologyData.nouns.regularSuffixes.slice();\n\t// Depending on the specific ending of the stem, we can add/remove some suffixes from the list of regulars.\n\tregularNounSuffixes = modifyListOfRegularSuffixes( morphologyData.nouns, regularNounSuffixes, stemmedWord );\n\n\t// If the stem wasn't found on any exception list, add regular noun suffixes.\n\tforms.push( ...regularNounSuffixes.map( suffix => stemmedWord.concat( suffix ) ) );\n\n\t// Also add regular adjective suffixes.\n\tforms.push( ...addAllAdjectiveSuffixes( morphologyData.adjectives, stemmedWord ) );\n\n\t// Also add regular verb suffixes.\n\tforms.push( ...generateRegularVerbForms( morphologyData.verbs, stemmedWord ) );\n\n\t// Also add the stemmed word, since it might be a valid word form on its own.\n\tforms.push( stemmedWord );\n\n\t/*\n\t * In some cases, we need make changes to the stem that aren't simply concatenations (e.g. remove n from the stem\n\t * Ärztinn to obtain Ärztin.\n\t */\n\tforms.push( ...addFormsWithRemovedLetters( morphologyData.nouns, stemmedWord ) );\n\n\treturn { forms: unique( forms ), stem: stemmedWord };\n}\n"]}