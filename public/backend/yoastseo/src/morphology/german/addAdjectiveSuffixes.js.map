{"version":3,"sources":["../../../../src/morphology/german/addAdjectiveSuffixes.js"],"names":["getSuffixesComparative","getSuffixesSuperlative","addRegularSuffixes","addComparativeSuffixes","addSuperlativeSuffixes","addAllAdjectiveSuffixes","morphologyDataAdjectives","stemmedWord","takesREnding","takesComparativeREnding","slice","some","endsWith","ending","comparativeSuffixesR","comparativeSuffixesEr","takesEstEnding","takesSuperlativeEstEnding","superlativeSuffixesEst","superlativeSuffixesSt","regularSuffixes","map","concat","suffix","comparativeSuffixes","superlativeSuffixes","suffixesToAdd"],"mappings":";;;;;QAUgBA,sB,GAAAA,sB;QAkBAC,sB,GAAAA,sB;QAkBAC,kB,GAAAA,kB;QAcAC,sB,GAAAA,sB;QAcAC,sB,GAAAA,sB;QAcAC,uB,GAAAA,uB;;AAxFhB;;;;AAEA;;;;;;;;AAQO,SAASL,sBAAT,CAAiCM,wBAAjC,EAA2DC,WAA3D,EAAyE;AAC/E,MAAMC,eAAeF,yBAAyBG,uBAAzB,CAAiDC,KAAjD,EAArB;;AAEA,MAAKF,aAAaG,IAAb,CAAmB;AAAA,WAAUJ,YAAYK,QAAZ,CAAsBC,MAAtB,CAAV;AAAA,GAAnB,CAAL,EAAqE;AACpE,WAAOP,yBAAyBQ,oBAAhC;AACA;;AAED,SAAOR,yBAAyBS,qBAAhC;AACA;;AAED;;;;;;;;AAQO,SAASd,sBAAT,CAAiCK,wBAAjC,EAA2DC,WAA3D,EAAyE;AAC/E,MAAMS,iBAAiBV,yBAAyBW,yBAAzB,CAAmDP,KAAnD,EAAvB;;AAEA,MAAKM,eAAeL,IAAf,CAAqB;AAAA,WAAUJ,YAAYK,QAAZ,CAAsBC,MAAtB,CAAV;AAAA,GAArB,CAAL,EAAuE;AACtE,WAAOP,yBAAyBY,sBAAhC;AACA;;AAED,SAAOZ,yBAAyBa,qBAAhC;AACA;;AAED;;;;;;;;AAQO,SAASjB,kBAAT,CAA6BI,wBAA7B,EAAuDC,WAAvD,EAAqE;AAC3E,MAAMa,kBAAkBd,yBAAyBc,eAAzB,CAAyCV,KAAzC,EAAxB;;AAEA,SAAO,oBAAQU,gBAAgBC,GAAhB,CAAqB;AAAA,WAAUd,YAAYe,MAAZ,CAAoBC,MAApB,CAAV;AAAA,GAArB,CAAR,CAAP;AACA;;AAED;;;;;;;;AAQO,SAASpB,sBAAT,CAAiCG,wBAAjC,EAA2DC,WAA3D,EAAyE;AAC/E,MAAMiB,sBAAsBxB,uBAAwBM,wBAAxB,EAAkDC,WAAlD,CAA5B;;AAEA,SAAOiB,oBAAoBH,GAApB,CAAyB;AAAA,WAAUd,YAAYe,MAAZ,CAAoBC,MAApB,CAAV;AAAA,GAAzB,CAAP;AACA;;AAED;;;;;;;;AAQO,SAASnB,sBAAT,CAAiCE,wBAAjC,EAA2DC,WAA3D,EAAyE;AAC/E,MAAMkB,sBAAsBxB,uBAAwBK,wBAAxB,EAAkDC,WAAlD,CAA5B;;AAEA,SAAOkB,oBAAoBJ,GAApB,CAAyB;AAAA,WAAUd,YAAYe,MAAZ,CAAoBC,MAApB,CAAV;AAAA,GAAzB,CAAP;AACA;;AAED;;;;;;;;AAQO,SAASlB,uBAAT,CAAkCC,wBAAlC,EAA4DC,WAA5D,EAA0E;AAChF,MAAMa,kBAAkBd,yBAAyBc,eAAzB,CAAyCV,KAAzC,EAAxB;AACA,MAAMc,sBAAsBxB,uBAAwBM,wBAAxB,EAAkDC,WAAlD,CAA5B;AACA,MAAMkB,sBAAsBxB,uBAAwBK,wBAAxB,EAAkDC,WAAlD,CAA5B;AACA,MAAMmB,6CAAqBN,eAArB,sBAAyCI,mBAAzC,sBAAiEC,mBAAjE,EAAN;;AAEA,SAAO,oBAAQC,cAAcL,GAAd,CAAmB;AAAA,WAAUd,YAAYe,MAAZ,CAAoBC,MAApB,CAAV;AAAA,GAAnB,CAAR,CAAP;AACA","file":"addAdjectiveSuffixes.js","sourcesContent":["import { uniq as unique } from \"lodash-es\";\n\n/**\n * Returns a set of comparative suffixes depending on the ending of the stem.\n *\n * @param {Object}  morphologyDataAdjectives    The German morphology data for adjectives.\n * @param {string}  stemmedWord                 The stemmed word for which to get suffixes.\n *\n * @returns {string[]} The correct comparative suffixes for the given stem.\n */\nexport function getSuffixesComparative( morphologyDataAdjectives, stemmedWord ) {\n\tconst takesREnding = morphologyDataAdjectives.takesComparativeREnding.slice();\n\n\tif ( takesREnding.some( ending => stemmedWord.endsWith( ending ) ) ) {\n\t\treturn morphologyDataAdjectives.comparativeSuffixesR;\n\t}\n\n\treturn morphologyDataAdjectives.comparativeSuffixesEr;\n}\n\n/**\n * Returns a set of superlative suffixes depending on the ending of the stem.\n *\n * @param {Object}  morphologyDataAdjectives    The German morphology data for adjectives.\n * @param {string}  stemmedWord                 The stemmed word for which to get suffixes.\n *\n * @returns {string[]} The correct superlative suffixes for the given stem.\n */\nexport function getSuffixesSuperlative( morphologyDataAdjectives, stemmedWord ) {\n\tconst takesEstEnding = morphologyDataAdjectives.takesSuperlativeEstEnding.slice();\n\n\tif ( takesEstEnding.some( ending => stemmedWord.endsWith( ending ) ) ) {\n\t\treturn morphologyDataAdjectives.superlativeSuffixesEst;\n\t}\n\n\treturn morphologyDataAdjectives.superlativeSuffixesSt;\n}\n\n/**\n * Adds all regular declension suffixes to a stem.\n *\n * @param {Object}      morphologyDataAdjectives    The German morphology data for adjectives.\n * @param {string}      stemmedWord                 The stemmed word for which to get suffixes.\n *\n * @returns {string[]} The suffixed adjective forms.\n */\nexport function addRegularSuffixes( morphologyDataAdjectives, stemmedWord ) {\n\tconst regularSuffixes = morphologyDataAdjectives.regularSuffixes.slice();\n\n\treturn unique( regularSuffixes.map( suffix => stemmedWord.concat( suffix ) ) );\n}\n\n/**\n * Adds suffixes for comparative forms to a stem.\n *\n * @param {Object}      morphologyDataAdjectives    The German morphology data for adjectives.\n * @param {string}      stemmedWord                 The stemmed word for which to get suffixes.\n *\n * @returns {string[]} The suffixed adjective forms.\n */\nexport function addComparativeSuffixes( morphologyDataAdjectives, stemmedWord ) {\n\tconst comparativeSuffixes = getSuffixesComparative( morphologyDataAdjectives, stemmedWord );\n\n\treturn comparativeSuffixes.map( suffix => stemmedWord.concat( suffix ) );\n}\n\n/**\n * Adds suffixes for comparative and superlative forms to a stem.\n *\n * @param {Object}      morphologyDataAdjectives    The German morphology data for adjectives.\n * @param {string}      stemmedWord                 The stemmed word for which to get suffixes.\n *\n * @returns {string[]} The suffixed adjective forms.\n */\nexport function addSuperlativeSuffixes( morphologyDataAdjectives, stemmedWord ) {\n\tconst superlativeSuffixes = getSuffixesSuperlative( morphologyDataAdjectives, stemmedWord );\n\n\treturn superlativeSuffixes.map( suffix => stemmedWord.concat( suffix ) );\n}\n\n/**\n * Adds regular declension suffixes as well as suffixes for comparative and superlative forms to a stem.\n *\n * @param {Object}      morphologyDataAdjectives    The German morphology data for adjectives.\n * @param {string}      stemmedWord                 The stemmed word for which to get suffixes.\n *\n * @returns {string[]} The suffixed adjective forms.\n */\nexport function addAllAdjectiveSuffixes( morphologyDataAdjectives, stemmedWord ) {\n\tconst regularSuffixes = morphologyDataAdjectives.regularSuffixes.slice();\n\tconst comparativeSuffixes = getSuffixesComparative( morphologyDataAdjectives, stemmedWord );\n\tconst superlativeSuffixes = getSuffixesSuperlative( morphologyDataAdjectives, stemmedWord );\n\tconst suffixesToAdd = [ ...regularSuffixes, ...comparativeSuffixes, ...superlativeSuffixes ];\n\n\treturn unique( suffixesToAdd.map( suffix => stemmedWord.concat( suffix ) ) );\n}\n"]}