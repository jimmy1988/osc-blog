{"version":3,"sources":["../../../../../src/tree/assess/scoreAggregators/ReadabilityScoreAggregator.js"],"names":["TOTAL_NR_OF_ASSESSMENTS","PENALTY_MAPPING_FULL_SUPPORT","bad","ok","good","PENALTY_MAPPING_PARTIAL_SUPPORT","READABILITY_SCORES","GOOD","OKAY","NEEDS_IMPROVEMENT","ReadabilityScoreAggregator","results","length","isFullySupported","penalty","reduce","sum","result","rating","getScore","filter","hasScore","hasText","validResults","getValidResults","calculatePenalty","calculateScore","ScoreAggregator"],"mappings":";;;;;;;;;AAAA;;AAGA;;;;;;;;;;;;AADA;;;AAGA;;;;;;;;AAQA,IAAMA,0BAA0B,CAAhC;;AAEA;;;;;;;;;;AAUA,IAAMC,+BAA+B;AACpCC,MAAK,CAD+B;AAEpCC,KAAI,CAFgC;AAGpCC,OAAM;AAH8B,CAArC;;AAMA;;;;;;;;;;AAUA,IAAMC,kCAAkC;AACvCH,MAAK,CADkC;AAEvCC,KAAI,CAFmC;AAGvCC,OAAM;AAHiC,CAAxC;;AAMA;;;;;;;;AAQO,IAAME,kDAAqB;AACjCC,OAAM,EAD2B;AAEjCC,OAAM,EAF2B;AAGjCC,oBAAmB;AAHc,CAA3B;;AAMP;;;;;;IAKMC,0B;;;;;;;;;;;;AACL;;;;;;;;mCAQkBC,O,EAAU;AAC3B;;;;;;;;;;AAUA,UAAOA,QAAQC,MAAR,KAAmBZ,uBAA1B;AACA;;AAED;;;;;;;;;;;;iCASgBa,gB,EAAkBC,O,EAAU;AAC3C,OAAKD,gBAAL,EAAwB;AACvB;;;;AAIA,QAAKC,UAAU,CAAf,EAAmB;AAClB,YAAOR,mBAAmBG,iBAA1B;AACA;;AAED,QAAKK,UAAU,CAAf,EAAmB;AAClB;;;;;;AAMA,YAAOR,mBAAmBE,IAA1B;AACA;AACD,IAlBD,MAkBO;AACN;;;;AAIA,QAAKM,UAAU,CAAf,EAAmB;AAClB,YAAOR,mBAAmBG,iBAA1B;AACA;;AAED,QAAKK,UAAU,CAAf,EAAmB;AAClB;;;;;AAKA,YAAOR,mBAAmBE,IAA1B;AACA;AACD;AACD,UAAOF,mBAAmBC,IAA1B;AACA;;AAED;;;;;;;;;;mCAOkBI,O,EAAU;AAAA;;AAC3B,UAAOA,QAAQI,MAAR,CAAgB,UAAEC,GAAF,EAAOC,MAAP,EAAmB;AACzC;AACA,QAAMC,SAAS,iCAAeD,OAAOE,QAAP,EAAf,CAAf;;AAEA,QAAML,UAAU,OAAKD,gBAAL,CAAuBF,OAAvB,IACbV,6BAA8BiB,MAA9B,CADa,GAEbb,gCAAiCa,MAAjC,CAFH;;AAIA;AACA,WAAOJ,UAAUE,MAAMF,OAAhB,GAA0BE,GAAjC;AACA,IAVM,EAUJ,CAVI,CAAP;AAWA;;AAED;;;;;;;;;;;kCAQiBL,O,EAAU;AAC1B,UAAOA,QAAQS,MAAR,CAAgB;AAAA,WAAUH,OAAOI,QAAP,MAAqBJ,OAAOK,OAAP,EAA/B;AAAA,IAAhB,CAAP;AACA;;AAED;;;;;;;;;;4BAOWX,O,EAAU;AACpB,OAAMY,eAAe,KAAKC,eAAL,CAAsBb,OAAtB,CAArB;;AAEA;;;;AAIA,OAAKY,aAAaX,MAAb,IAAuB,CAA5B,EAAgC;AAC/B,WAAON,mBAAmBG,iBAA1B;AACA;;AAED,OAAMK,UAAU,KAAKW,gBAAL,CAAuBF,YAAvB,CAAhB;AACA,OAAMV,mBAAmB,KAAKA,gBAAL,CAAuBF,OAAvB,CAAzB;AACA,UAAO,KAAKe,cAAL,CAAqBb,gBAArB,EAAuCC,OAAvC,CAAP;AACA;;;;EA9HuCa,yB;;kBAiI1BjB,0B","file":"ReadabilityScoreAggregator.js","sourcesContent":["import { scoreToRating } from \"../../../interpreters\";\n\n/* Internal dependencies */\nimport ScoreAggregator from \"./ScoreAggregator\";\n\n/**\n * Total number of available readability assessments.\n *\n * @type {number}\n * @const\n *\n * @memberOf module:tree/assess\n */\nconst TOTAL_NR_OF_ASSESSMENTS = 8;\n\n/**\n * Penalties that can be given on each assessment\n * when all assessments are currently supported\n * for the user's language.\n *\n * @type {{ok: number, bad: number, good: number}}\n * @const\n *\n * @memberOf module:tree/assess\n */\nconst PENALTY_MAPPING_FULL_SUPPORT = {\n\tbad: 3,\n\tok: 2,\n\tgood: 0,\n};\n\n/**\n * Penalties that can be given on each assessment\n * when only a part of the assessments are currently supported\n * for the user's language.\n *\n * @type {{ok: number, bad: number, good: number}}\n * @const\n *\n * @memberOf module:tree/assess\n */\nconst PENALTY_MAPPING_PARTIAL_SUPPORT = {\n\tbad: 4,\n\tok: 2,\n\tgood: 0,\n};\n\n/**\n * The scores that can be given on the readability analysis.\n *\n * @type {{GOOD: number, OKAY: number, NEEDS_IMPROVEMENT: number}}\n * @const\n *\n * @memberOf module:tree/assess\n */\nexport const READABILITY_SCORES = {\n\tGOOD: 90,\n\tOKAY: 60,\n\tNEEDS_IMPROVEMENT: 30,\n};\n\n/**\n * Aggregates the results of the readability analysis into a single score.\n *\n * @memberOf module:tree/assess\n */\nclass ReadabilityScoreAggregator extends ScoreAggregator {\n\t/**\n\t * Determines whether a language is fully supported. If a language supports 8 content assessments\n\t * it is fully supported.\n\t *\n\t * @param {AssessmentResult[]} results The list of results.\n\t *\n\t * @returns {boolean} True if fully supported.\n\t */\n\tisFullySupported( results ) {\n\t\t/*\n\t\t * Apparently, we check whether an assessment is applicable\n\t\t * as a way to check if it is supported for the current language.\n\t\t *\n\t\t * Although we do check whether a language is supported in some readability assessments,\n\t\t * we also check whether papers have text to analyze among other things.\n\t\t *\n\t\t * Since only applicable assessments are applied, we only get the results\n\t\t * of applicable assessments either way. So this check suffices.\n\t\t */\n\t\treturn results.length === TOTAL_NR_OF_ASSESSMENTS;\n\t}\n\n\t/**\n\t * Calculates the overall score (GOOD, OKAY or NEEDS IMPROVEMENT)\n\t * based on the penalty.\n\t *\n\t * @param {boolean} isFullySupported Whether this language is fully supported.\n\t * @param {number}  penalty          The total penalty.\n\t *\n\t * @returns {number} The overall score.\n\t */\n\tcalculateScore( isFullySupported, penalty ) {\n\t\tif ( isFullySupported ) {\n\t\t\t/*\n\t\t\t * If the language is fully supported, we are more lenient.\n\t\t\t * A higher penalty is needed to get lower scores.\n\t\t\t */\n\t\t\tif ( penalty > 6 ) {\n\t\t\t\treturn READABILITY_SCORES.NEEDS_IMPROVEMENT;\n\t\t\t}\n\n\t\t\tif ( penalty > 4 ) {\n\t\t\t\t/*\n\t\t\t\t * A penalty between 4 and 6 means either:\n\t\t\t\t *  - One \"ok\" and one \"bad\" result (5).\n\t\t\t\t *  - Two \"bad\" results of 3 points each (6).\n\t\t\t\t *  - Three \"ok\" results of 2 points each (6).\n\t\t\t\t */\n\t\t\t\treturn READABILITY_SCORES.OKAY;\n\t\t\t}\n\t\t} else {\n\t\t\t/*\n\t\t\t * If the language is NOT fully supported, we are more stringent.\n\t\t\t * The penalty threshold for getting lower scores is set lower.\n\t\t\t */\n\t\t\tif ( penalty > 4 ) {\n\t\t\t\treturn READABILITY_SCORES.NEEDS_IMPROVEMENT;\n\t\t\t}\n\n\t\t\tif ( penalty > 2 ) {\n\t\t\t\t/*\n\t\t\t\t * A penalty of 3 or 4 means:\n\t\t\t\t *  - Two \"ok\" results of 2 points each (4).\n\t\t\t\t *  - One \"bad\" result of 4 points (4).\n\t\t\t\t */\n\t\t\t\treturn READABILITY_SCORES.OKAY;\n\t\t\t}\n\t\t}\n\t\treturn READABILITY_SCORES.GOOD;\n\t}\n\n\t/**\n\t * Calculates the total penalty based on the given assessment results.\n\t *\n\t * @param {AssessmentResult[]} results The valid results from which to calculate the total penalty.\n\t *\n\t * @returns {number} The total penalty for the results.\n\t */\n\tcalculatePenalty( results ) {\n\t\treturn results.reduce( ( sum, result ) => {\n\t\t\t// Compute the rating (\"error\", \"feedback\", \"bad\", \"ok\" or \"good\").\n\t\t\tconst rating = scoreToRating( result.getScore() );\n\n\t\t\tconst penalty = this.isFullySupported( results )\n\t\t\t\t? PENALTY_MAPPING_FULL_SUPPORT[ rating ]\n\t\t\t\t: PENALTY_MAPPING_PARTIAL_SUPPORT[ rating ];\n\n\t\t\t// Add penalty when available.\n\t\t\treturn penalty ? sum + penalty : sum;\n\t\t}, 0 );\n\t}\n\n\t/**\n\t * Returns the list of valid results.\n\t * Valid results are all results that have a score and a text.\n\t *\n\t * @param {AssessmentResult[]} results The results to filter the valid results from.\n\t *\n\t * @returns {AssessmentResult[]} The list of valid results.\n\t */\n\tgetValidResults( results ) {\n\t\treturn results.filter( result => result.hasScore() && result.hasText() );\n\t}\n\n\t/**\n\t * Aggregates the given assessment results into a single analysis score.\n\t *\n\t * @param {AssessmentResult[]} results The assessment results.\n\t *\n\t * @returns {number} The aggregated score.\n\t */\n\taggregate( results ) {\n\t\tconst validResults = this.getValidResults( results );\n\n\t\t/*\n\t\t * If you have no content, you have a red indicator.\n\t\t * (Assume that one result always means the 'no content' assessment result).\n\t\t */\n\t\tif ( validResults.length <= 1 ) {\n\t\t\treturn READABILITY_SCORES.NEEDS_IMPROVEMENT;\n\t\t}\n\n\t\tconst penalty = this.calculatePenalty( validResults );\n\t\tconst isFullySupported = this.isFullySupported( results );\n\t\treturn this.calculateScore( isFullySupported, penalty );\n\t}\n}\n\nexport default ReadabilityScoreAggregator;\n"]}