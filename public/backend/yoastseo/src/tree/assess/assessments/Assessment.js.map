{"version":3,"sources":["../../../../../src/tree/assess/assessments/Assessment.js"],"names":["Assessment","name","researcher","_researcher","paper","node","console","warn"],"mappings":";;;;;;;;;;AAAA;;;;;;;IAOMA,U;AACL;;;;;;;;AAQA,qBAAaC,IAAb,EAAmBC,UAAnB,EAAgC;AAAA;;AAC/B;;;;AAIA,OAAKD,IAAL,GAAYA,IAAZ;AACA;;;;;AAKA,OAAKE,WAAL,GAAmBD,UAAnB;AACA;;AAED;;;;;;;;;;;gCAOeA,U,EAAa;AAC3B,QAAKC,WAAL,GAAmBD,UAAnB;AACA;;AAED;;;;;;;;kCAKgB;AACf,UAAO,KAAKC,WAAZ;AACA;;AAED;;;;;;;;;;;;;qCAUoBC,K,EAAOC,I,EAAO;AAAE;AACnCC,WAAQC,IAAR,CAAc,wEAAd;AACA;;AAED;;;;;;;;;;;;;8BAUaH,K,EAAOC,I,EAAO;AAAE;AAC5BC,WAAQC,IAAR,CAAc,iEAAd;AACA;;;;;;kBAIaP,U","file":"Assessment.js","sourcesContent":["/**\n * An assessment that can be applied to a formatted text and its meta data.\n *\n * @memberOf module:tree/assess\n *\n * @abstract\n */\nclass Assessment {\n\t/**\n\t * Creates a new assessment.\n\t *\n\t * @param {string}                              name       The name to give this assessment.\n\t * @param {module:tree/research.TreeResearcher} researcher The researcher to do researches with.\n\t *\n\t * @abstract\n\t */\n\tconstructor( name, researcher ) {\n\t\t/**\n\t\t * This assessment's name.\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = name;\n\t\t/**\n\t\t * The researcher to do researches with.\n\t\t * @type {module:tree/research.TreeResearcher}\n\t\t * @private\n\t\t */\n\t\tthis._researcher = researcher;\n\t}\n\n\t/**\n\t * Sets a new researcher on this assessment.\n\t *\n\t * @param {module:tree/research.TreeResearcher} researcher The researcher to do researches with.\n\t *\n\t * @returns {void}\n\t */\n\tsetResearcher( researcher ) {\n\t\tthis._researcher = researcher;\n\t}\n\n\t/**\n\t * Returns the researcher used by this assessment.\n\t *\n\t * @returns {module:tree/research.TreeResearcher} The researcher used by this assessment.\n\t */\n\tgetResearcher() {\n\t\treturn this._researcher;\n\t}\n\n\t/**\n\t * Checks whether this assessment is applicable to the given paper and tree combination.\n\t *\n\t * @param {Paper} paper                     The paper to check.\n\t * @param {module:tree/structure.Node} node The root node of the tree to check.\n\t *\n\t * @returns {Promise<boolean>} Whether this assessment is applicable to the given paper and tree combination (wrapped in a promise).\n\t *\n\t * @abstract\n\t */\n\tasync isApplicable( paper, node ) { // eslint-disable-line no-unused-vars\n\t\tconsole.warn( \"`isApplicable` should be implemented by a child class of `Assessment`.\" );\n\t}\n\n\t/**\n\t * Applies this assessment to the given combination of paper and tree.\n\t *\n\t * @param {Paper} paper                                    The paper to check.\n\t * @param {module:tree/structure.Node} node                The root node of the tree to check.\n\t *\n\t * @returns {Promise<AssessmentResult>} The result of this assessment (wrapped in a promise).\n\t *\n\t * @abstract\n\t */\n\tasync apply( paper, node ) { // eslint-disable-line no-unused-vars\n\t\tconsole.warn( \"`apply` should be implemented by a child class of `Assessment`.\" );\n\t}\n}\n\n\nexport default Assessment;\n"]}