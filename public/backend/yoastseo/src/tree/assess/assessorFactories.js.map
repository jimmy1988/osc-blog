{"version":3,"sources":["../../../../src/tree/assess/assessorFactories.js"],"names":["SEO_ASSESSMENTS_MAP","Default","constructSEOAssessments","RelatedKeyphrase","constructRelatedKeyphraseAssessments","Taxonomy","constructTaxonomyAssessments","RelatedKeyphraseTaxonomy","constructRelatedKeyphraseTaxonomyAssessments","Cornerstone","constructCornerstoneSEOAssessments","CornerstoneRelatedKeyphrase","constructCornerstoneRelatedKeyphraseAssessments","constructSEOAssessor","i18n","researcher","config","cornerstone","relatedKeyphrase","taxonomy","key","join","assessmentFactory","Error","assessments","scoreAggregator","SEOScoreAggregator","TreeAssessor","constructReadabilityAssessor","isCornerstoneContent","ReadabilityScoreAggregator"],"mappings":";;;;;;;AACA;;AAQA;;AAOA;;AAGA;;;;;;AAEA;;;;;;;;;;AANA;AAfA;AA6BA,IAAMA,sBAAsB;AAC3BC,UAASC,gDADkB;;AAG3BC,mBAAkBC,6DAHS;AAI3BC,WAAUC,qDAJiB;AAK3BC,2BAA0BC,qEALC;;AAO3BC,cAAaC,iDAPc;AAQ3BC,8BAA6BC;AARF,CAA5B;;AAWA;;;;;;;;;;;;;;;;;;;AAtBA;AAuCA,IAAMC,uBAAuB,SAAvBA,oBAAuB,CAAUC,IAAV,EAAgBC,UAAhB,EAA4BC,MAA5B,EAAqC;AACjE;;;;AAIA,KAAMC,cAAcD,OAAOC,WAAP,GAAqB,aAArB,GAAqC,EAAzD;AACA,KAAMC,mBAAmBF,OAAOE,gBAAP,GAA0B,kBAA1B,GAA+C,EAAxE;AACA,KAAMC,WAAWH,OAAOG,QAAP,GAAkB,UAAlB,GAA+B,EAAhD;;AAEA;AACA,KAAMC,MAAM,CAAEH,WAAF,EAAeC,gBAAf,EAAiCC,QAAjC,EAA4CE,IAA5C,CAAkD,EAAlD,KAA0D,SAAtE;;AAEA;AACA,KAAMC,oBAAoBtB,oBAAqBoB,GAArB,CAA1B;;AAEA;AACA,KAAK,CAAEE,iBAAP,EAA2B;AAC1B,QAAM,IAAIC,KAAJ,CAAW,oFAAX,CAAN;AACA;;AAED;AACA,KAAMC,cAAcF,mBAApB;AACA,KAAMG,kBAAkB,IAAIC,oCAAJ,EAAxB;AACA,QAAO,IAAIC,sBAAJ,CAAkB,EAAEb,UAAF,EAAQC,sBAAR,EAAoBS,wBAApB,EAAiCC,gCAAjC,EAAlB,CAAP;AACA,CAxBD;;AA0BA;;;;;;;;;;;;AAYA,IAAMG,+BAA+B,SAA/BA,4BAA+B,CAAUd,IAAV,EAAgBC,UAAhB,EAA2D;AAAA,KAA/Bc,oBAA+B,uEAAR,KAAQ;;AAC/F,KAAML,cAAcK,uBAAuB,+DAAvB,GAA2D,gEAA/E;AACA,KAAMJ,kBAAkB,IAAIK,4CAAJ,EAAxB;AACA,QAAO,IAAIH,sBAAJ,CAAkB,EAAEb,UAAF,EAAQC,sBAAR,EAAoBS,wBAApB,EAAiCC,gCAAjC,EAAlB,CAAP;AACA,CAJD;;QAOCZ,oB,GAAAA,oB;QACAe,4B,GAAAA,4B","file":"assessorFactories.js","sourcesContent":["/* Assessment list factories. */\nimport {\n\tconstructReadabilityAssessments,\n\tconstructRelatedKeyphraseAssessments,\n\tconstructRelatedKeyphraseTaxonomyAssessments,\n\tconstructSEOAssessments,\n\tconstructTaxonomyAssessments,\n} from \"./assessmentListFactories\";\n\nimport {\n\tconstructSEOAssessments as constructCornerstoneSEOAssessments,\n\tconstructRelatedKeyphraseAssessments as constructCornerstoneRelatedKeyphraseAssessments,\n\tconstructReadabilityAssessments as constructCornerstoneReadabilityAssessments,\n} from \"./cornerstone/assessmentListFactories\";\n\n/* Score aggregators */\nimport { ReadabilityScoreAggregator, SEOScoreAggregator } from \"./scoreAggregators\";\n\n/* Base TreeAssessor class */\nimport TreeAssessor from \"./TreeAssessor\";\n\n/**\n * Maps combinations of assessor parameters (if the assessor is for related keyphrases, cornerstone content and/or taxonomy pages)\n * to functions that generate a list of applicable assessments.\n *\n * @const\n * @private\n * @type {Object}\n */\nconst SEO_ASSESSMENTS_MAP = {\n\tDefault: constructSEOAssessments,\n\n\tRelatedKeyphrase: constructRelatedKeyphraseAssessments,\n\tTaxonomy: constructTaxonomyAssessments,\n\tRelatedKeyphraseTaxonomy: constructRelatedKeyphraseTaxonomyAssessments,\n\n\tCornerstone: constructCornerstoneSEOAssessments,\n\tCornerstoneRelatedKeyphrase: constructCornerstoneRelatedKeyphraseAssessments,\n};\n\n/**\n * Constructs a new SEO assessor.\n *\n * @param {Jed}                                 i18n       The Jed object to use for localization / internalization.\n * @param {module:tree/research.TreeResearcher} researcher The researcher the assessments need to use to get information about the text.\n *\n * @param {Object}                              config                    The assessor configuration.\n * @param {boolean}                             [config.relatedKeyphrase] If this assessor is for a related keyphrase, instead of the main one.\n * @param {boolean}                             [config.taxonomy]         If this assessor is for a taxonomy page, instead of a regular page.\n * @param {boolean}                             [config.cornerstone]      If this assessor is for cornerstone content.\n *\n * @returns {module:tree/assess.TreeAssessor} The created SEO assessor.\n *\n * @throws {Error} An error when no assessor exists for the given combination of configuration options.\n *\n * @memberOf module:tree/assess\n */\nconst constructSEOAssessor = function( i18n, researcher, config ) {\n\t/*\n\t * Construct the key to retrieve the right assessment list factory.\n\t * E.g. \"RelatedKeyphraseTaxonomy\" for related keyphrase + taxonomy;\n\t */\n\tconst cornerstone = config.cornerstone ? \"Cornerstone\" : \"\";\n\tconst relatedKeyphrase = config.relatedKeyphrase ? \"RelatedKeyphrase\" : \"\";\n\tconst taxonomy = config.taxonomy ? \"Taxonomy\" : \"\";\n\n\t// (Empty key defaults to \"Default\" key)\n\tconst key = [ cornerstone, relatedKeyphrase, taxonomy ].join( \"\" ) || \"Default\";\n\n\t// Retrieve the assessment list factory.\n\tconst assessmentFactory = SEO_ASSESSMENTS_MAP[ key ];\n\n\t// This specific combination of cornerstone, taxonomy and related keyphrase does not exist.\n\tif ( ! assessmentFactory ) {\n\t\tthrow new Error( \"Cannot make an assessor based on the provided combination of configuration options\" );\n\t}\n\n\t// Construct assessor.\n\tconst assessments = assessmentFactory();\n\tconst scoreAggregator = new SEOScoreAggregator();\n\treturn new TreeAssessor( { i18n, researcher, assessments, scoreAggregator } );\n};\n\n/**\n * Constructs a new readability assessor.\n *\n * @param {Jed}                                 i18n                 The Jed object to use for localization / internalization.\n * @param {module:tree/research.TreeResearcher} researcher           The researcher the assessments need to use to get information about the text.\n * @param {boolean}                             isCornerstoneContent If the to be analyzed content is considered cornerstone content\n * (which uses stricter boundaries).\n *\n * @returns {module:tree/assess.TreeAssessor} The created readability assessor.\n *\n * @memberOf module:tree/assess\n */\nconst constructReadabilityAssessor = function( i18n, researcher, isCornerstoneContent = false ) {\n\tconst assessments = isCornerstoneContent ? constructReadabilityAssessments() : constructCornerstoneReadabilityAssessments();\n\tconst scoreAggregator = new ReadabilityScoreAggregator();\n\treturn new TreeAssessor( { i18n, researcher, assessments, scoreAggregator } );\n};\n\nexport {\n\tconstructSEOAssessor,\n\tconstructReadabilityAssessor,\n};\n"]}