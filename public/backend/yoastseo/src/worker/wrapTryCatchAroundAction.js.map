{"version":3,"sources":["../../../src/worker/wrapTryCatchAroundAction.js"],"names":["wrapTryCatchAroundAction","handleError","logger","error","payload","errorMessagePrefix","errorMessage","name","message","stack","debug","push","join","action"],"mappings":";;;;;kBA2CwBA,wB;;AA3CxB;;;;;;AAEA;;;;;;;;;;;AAWA,IAAMC,cAAc,SAAdA,WAAc,CAAUC,MAAV,EAAkBC,KAAlB,EAAyBC,OAAzB,EAA4D;AAAA,KAA1BC,kBAA0B,uEAAL,EAAK;;AAC/E;AACA,KAAKD,OAAL,EAAe;AACdC,uBAAqB,4BAAcA,kBAAd,EAAkCD,OAAlC,CAArB;AACA;;AAED,KAAIE,eAAeD,qBAAqB,CAAEA,kBAAF,CAArB,GAA8C,EAAjE;;AAEA,KAAKF,MAAMI,IAAN,IAAcJ,MAAMK,OAAzB,EAAmC;AAClC,MAAKL,MAAMM,KAAX,EAAmB;AAClBP,UAAOQ,KAAP,CAAcP,MAAMM,KAApB;AACA;AACD;AACAH,eAAaK,IAAb,CAAsBR,MAAMI,IAA5B,UAAqCJ,MAAMK,OAA3C;AACA;;AAEDF,gBAAeA,aAAaM,IAAb,CAAmB,MAAnB,CAAf;AACAV,QAAOC,KAAP,CAAcG,YAAd;AACA,QAAOA,YAAP;AACA,CAnBD;;AAqBA;;;;;;;;;AASe,SAASN,wBAAT,CAAmCE,MAAnC,EAA2CW,MAA3C,EAA6E;AAAA,KAA1BR,kBAA0B,uEAAL,EAAK;;AAC3F,QAAO,YAAe;AACrB,MAAI;AACH,UAAOQ,kCAAP;AACA,GAFD,CAEE,OAAQV,KAAR,EAAgB;AACjB,OAAMG,eAAeL,YAAaC,MAAb,EAAqBC,KAArB,oDAAuCE,kBAAvC,CAArB;AACA,UAAO,EAAEF,OAAOG,YAAT,EAAP;AACA;AACD,EAPD;AAQA","file":"wrapTryCatchAroundAction.js","sourcesContent":["import formatString from \"../helpers/formatString\";\n\n/**\n * Logs and formats the error message to send back to the plugin\n * when an analysis web worker action fails.\n *\n * @param {Logger}\tlogger\t\t\t\t\tThe logger instance to log with.\n * @param {Error} \terror\t\t\t\t\tThe error to log.\n * @param {Object}\tpayload\t\t\t\t\tThe action payload.\n * @param {string} \t[errorMessagePrefix=\"\"]\tThe prefix of the error message.\n *\n * @returns {string} the error message to send back.\n */\nconst handleError = function( logger, error, payload, errorMessagePrefix = \"\" ) {\n\t// Try to format the string with payload parameters, if there are any.\n\tif ( payload ) {\n\t\terrorMessagePrefix = formatString( errorMessagePrefix, payload );\n\t}\n\n\tlet errorMessage = errorMessagePrefix ? [ errorMessagePrefix ] : [];\n\n\tif ( error.name && error.message ) {\n\t\tif ( error.stack ) {\n\t\t\tlogger.debug( error.stack );\n\t\t}\n\t\t// Standard JavaScript error (e.g. when calling `throw new Error( message )`).\n\t\terrorMessage.push( `${error.name}: ${error.message}` );\n\t}\n\n\terrorMessage = errorMessage.join( \"\\n\\t\" );\n\tlogger.error( errorMessage );\n\treturn errorMessage;\n};\n\n/**\n * Wraps the given action in a try-catch that logs the error message.\n *\n * @param {Logger}   logger                  The logger instance to log with.\n * @param {Function} action                  The action to safely run.\n * @param {string}   [errorMessagePrefix=\"\"] The prefix of the error message.\n *\n * @returns {Function} The wrapped action.\n */\nexport default function wrapTryCatchAroundAction( logger, action, errorMessagePrefix = \"\" ) {\n\treturn ( ...args ) => {\n\t\ttry {\n\t\t\treturn action( ...args );\n\t\t} catch ( error ) {\n\t\t\tconst errorMessage = handleError( logger, error, args[ 1 ], errorMessagePrefix );\n\t\t\treturn { error: errorMessage };\n\t\t}\n\t};\n}\n"]}